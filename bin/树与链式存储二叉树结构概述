  
树结构就像是一颗反着的树，一个节点有多个分支，分支出来后也可以继续向下产生分支

           为什么使用树结构:如果用顺序存储来存储数据，向其中一个位置插入一个数据，这个数组需要先增加一个新的位置，然后要插入的位置的数据依次向后挪一位，查找某个位置的数据可以直接按照下标来查找
                                   如果使用链式存储，要增加一个，只需要将前后的存储节点与这个要加入的节点建立联系就可以，但是查找数据的话只能从第一位开始，依次向后查找下一个位置来查找数据，不方便
                                   树可以说综合了线性结构的顺序存储和链式存储的优点，便于插入，便于查找
            
            
             树结构的基本概念:1.根节点(最顶上的一个节点)
                2.双亲节点(认为雌雄同体)，产生这个子节点的节点就是双亲节点（上一层是产生了下一层的节点的双亲节点）
                3.子节点:双亲节点产生的新的节点
                4.路径:根节点要访问下面一层层分支的节点需要走的路线
                5.节点的度:一个节点有多少个子节点，就认为的度是多少
                6.节点的权:这个节点存储的数字就是节点的权
                7.叶子节点:没有子节点的节点(这个节点不产生分支)
                8.子树:一个节点作为根节点，包含他所有的子孙称为子树，根节点可以认为是它本身的一个子树
                9.层:相同辈分的节点为同一层，根节点为第一层(层就是树的辈分)
                10.树的高度:一共有几层，高度就是几
                11.森林:多个树组成的一个集合
                
        二叉树:任何一个节点的子节点不超过两个(分支最多只有两个)，子节点分为左节点和右节点，严格区分左右节点，即使只有一个节点，也要定义左右节点
        
               满二叉树:所有叶子节点都在最后一层(意思是二叉树除了叶子节点层和根节点层之外，每层的节点都有两个分支)，节点的总数就为2^n-1，n指的是二叉树的高度(或者层数)
               完全二叉树:所有叶子节点都在最后一层或倒数第二层，并且倒数第二层在右边连续(右左右左节点顺序)，最后一层的节点必须满足左右左右节点连续排列下来，一旦出现没有左节点，但是出现了右节点，这个二叉树就不是完全二叉树了        
                              可以通过从上往下，从左往右的顺序来数这个二叉树，能数满就是完全二叉树，从左往右的时候，如果下一个节点是倒数第二层，那么可以数下一层的，如果不是，那么这个二叉树就不是完全二叉树
     
                二叉树的存储结构分为链式存储结构(麻辣香锅)和顺序存储结构     
                                 链式存储结构有三个空间，两个空间分别指向左节点和右节点，另一个空间存储数据
                                
                                 二叉树的几种形态:1.没有节点的空树
                       2.左斜树(左左左)
                       3.右斜树(右右右)
                       4.左右左树
                       5.右左右数      
 
 
  链式存储二叉树的遍历:                    
                       链式存储二叉树的遍历分为前序遍历，中序遍历，后序遍历
                                       例如这个树                 1
                     2        3
                   4   5    6    7
                                  1.前序遍历:1 2 4 5 3 6 7
                                  2.中序遍历:4 2 5 1 6 3 7	
                                  3.后序遍历:4 5 2 6 7 3 1 
                        三种遍历使用递归的方法，如果儿子节点有子树，将子树遍历完才转到另一个儿子节点(深度优先) 具体见TreeNode的front,middle,after三种show方法
                                         前序遍历:先取根节点，再取他的儿子节点（儿子节点如果有分支，那儿子节点也相当于一个根结点）
                                         中序遍历:先取左儿子节点，然后取根节点，再取右儿子节点
                                         后序遍历:先取左儿子节点，然后取右儿子节点，最后取根节点
                                         
链式存储 二叉树中节点的查找:
        遍历二叉树，如果一个节点中有查找的数据，就将这个节点返回，没有的话就返回一个null，对应三种遍历方式，同样有前序中序后序的三种查找方式           
          
链式存储二叉树中节点的删除: 
                 先查找包含指定数据的节点，然后将它 的父节点指向它的箭头取消即可。如果要删除的节点为叶子节点，直接删除，如果要删除的节点有子节点，那么删除也就会将它的子节点也删除(将整个子树删除)     
                例如删除上面示例的3节点，那么6，7也都会被删除           
        