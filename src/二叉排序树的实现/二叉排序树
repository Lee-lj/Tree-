例如一组数组{7 3 10 12 5 1 9}
           采用线性结构存储(顺序和链式):
         1.顺序存储:也分为两种情况，排序和不排序存储
                  a.不排序存储:{7 3 10 12 5 1 9},查找一个数的话占用时间(线性查找)
                  b.排序存储:{1 3 5 7 9 10 12}，使用二分查找，效率有所提高，但是如果进行删除或者插入的话需要挪动整个数组，比较困难
         2.链式存储: 无论数组是否进行排序，存储位置不连续，查找一个数得从头开始挨个查找，也比较困难         
         
            二叉排序树可以进行删除，插入，查找，操作的时候容易实现，综合了顺序存储和链式存储的特点
         
二叉排序树:也叫二叉查找树，二叉搜索树，   对于二叉树中的任何一个非叶子节点，要求当前节点的左儿子节点小于当前节点，当前节点的右儿子节点大于当前节点
                         例如使用{7 3 10 12 5 1 9}构成二叉查找树，如果要插入一个节点，相比于顺序存储和链式存储，只需要将2和根节点比较，和子节点比较，直到和叶子节点比较，让这个叶子节点指向它即可，不需要在数组中挪动位置
                             7
                          3      10
                        1   5   9  12  
                         2
                         
                        按照数组的下标从前往后取值，第一个数作为根节点，后面的数比根节点大，作为右儿子节点，更后面的数比根节点大，将这个数再次和右儿子节点比较，比右儿子节点大，就作为右孙子节点，小就作为右儿子节点的左儿子节点。同理比根节点小就作为左儿子节点，后面的数再比根节点小时跟左儿子节点比较，作为孙子节点    
         
        节点的增加，遍历已经完成，但是节点的删除有多种情况:
         1.删除叶子节点:直接让它的父节点从指向它转为指向空
         2.删除含有一个子节点的节点:将这个节点的父节点从指向它转为指向它的字节点
         3.删除含有两个子节点的节点: 两种情况:1.删除掉上面的7或3,10等有两个子节点的节点，比如删除7，找到7的后继节点9，将7替换为9，同时删除9原来的节点
                                   2.例如这样的一棵树    
                              7
                          3        11
                        1   5    9     12 
                                   10   要删除7的话9这个节点去到7的位置，让9的右儿子节点10代替9的位置  ，10只会是某个节点的右节点，因为如果是左节点，根节点的后继节点就是10。根节点左子树必小于根节点，右子树必大于根节点
                                   